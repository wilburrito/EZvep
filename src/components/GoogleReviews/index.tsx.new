import { useState, useEffect, useRef } from "react";
import { Row, Col, Rate, Avatar, Card, Spin, Carousel, Button } from "antd";
import { withTranslation } from "react-i18next";
import { GoogleReviewsProps } from "./types";
import './styles.css';
import {
  GoogleReviewsContainer,
  ReviewsWrapper,
  ReviewsHeader,
  ReviewCard,
  ReviewAuthor,
  ReviewText,
  ReviewDate,
  GoogleLogo,
  ReviewImageContainer,
  WriteReviewButton
} from "./styles";

// Define review interface to handle all possible properties from Google Places API
interface GoogleReview {
  author_name: string;
  rating: number;
  text?: string;
  text_original?: string; // Some reviews have text under text_original instead of text
  time: number;
  profile_photo_url?: string;
  review_image_url?: string; // Optional image attached to the review
  photos?: Array<{ photo_reference: string }>; // Raw photo references from Google API
  author_url?: string;
  language?: string;
  relative_time_description?: string;
}

const GoogleReviews = ({ title, content, id, t }: GoogleReviewsProps) => {
  const [reviews, setReviews] = useState<GoogleReview[]>([]);
  const [loading, setLoading] = useState(true);
  const [totalReviews, setTotalReviews] = useState(0);

  // Format date to readable string
  const formatDate = (timestamp: number) => {
    const date = new Date(timestamp);
    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
    return date.toLocaleDateString('en-US', options);
  };

  // Carousel reference
  const carouselRef = useRef<any>(null);

  const nextSlide = () => {
    if (carouselRef.current) {
      carouselRef.current.next();
    }
  };

  const prevSlide = () => {
    if (carouselRef.current) {
      carouselRef.current.prev();
    }
  };

  useEffect(() => {
    const fetchReviews = async () => {
      setLoading(true);
      console.log('üîÑ Starting to fetch reviews...');
      
      try {
        // Call our backend API to fetch Google reviews
        const placeId = process.env.REACT_APP_GOOGLE_PLACE_ID || "ChIJ88pp-7EZtE0RttmdZtbpdMc";
        console.log('üè¨ Using Place ID:', placeId);
        
        // Use Google Places API to fetch real reviews
        const useManualReviews = false;
        
        // Determine the API URL based on environment and chosen method
        const apiBaseUrl = useManualReviews
          ? (process.env.NODE_ENV === 'production' ? '/api/manual-reviews' : 'http://localhost:5000/api/manual-reviews')
          : (process.env.NODE_ENV === 'production' ? '/api/google-reviews' : 'http://localhost:5000/api/google-reviews');
        
        console.log('üåê Using API URL:', apiBaseUrl);
        
        try {
          // Make the API call to our backend with CORS headers
          console.log(`üöÄ Attempting to fetch reviews from: ${apiBaseUrl}?placeId=${placeId}`);
          const response = await fetch(`${apiBaseUrl}?placeId=${placeId}`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          });
          
          if (!response.ok) {
            throw new Error(`API response error: ${response.status} ${response.statusText}`);
          }
          
          const data = await response.json();
          
          if (data.reviews && data.reviews.length > 0) {
            console.log(`‚úÖ Successfully loaded ${data.reviews.length} reviews from API`);
            setReviews(data.reviews);
            setTotalReviews(data.reviews.length);
          } else {
            console.log('‚ö†Ô∏è No reviews found in API response');
            setReviews([]);
            setTotalReviews(0);
          }
        } catch (error) {
          console.error('‚õî Error fetching reviews from API:', error);
          // Use fallback data if API fails
          setReviews([
            {
              author_name: "Simon Lee",
              rating: 5,
              text: "Excellent Services provided by First VEP Solutions. Fast and very good services. Friendly and very helpful. Strongly recommend their services for VEP Malaysia!",
              time: 1620000000000,
              profile_photo_url: "https://ui-avatars.com/api/?name=Simon+Lee&background=random"
            },
            {
              author_name: "Amos Lum",
              rating: 5,
              text: "Excellent service. Very fast and delivered as promised.",
              time: 1630000000000,
              profile_photo_url: "https://ui-avatars.com/api/?name=Amos+Lum&background=random"
            },
            {
              author_name: "Muhammad Syairul",
              rating: 5,
              text: "The service provided was quick and efficient! Everything was done within a week. Highly recommend to anyone who's applying for it üòä",
              time: 1640000000000,
              profile_photo_url: "https://ui-avatars.com/api/?name=Muhammad+Syairul&background=random"
            },
          ]);
          setTotalReviews(3);
        }
      } catch (error) {
        console.error('‚õî Error in review fetching:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchReviews();
  }, []);

  return (
    <GoogleReviewsContainer>
      <Row justify="center">
        <Col span={24}>
          <Card bordered={false}>
            <ReviewsHeader>
              <h2>EXCELLENT</h2>
              <Rate disabled defaultValue={5} style={{ fontSize: '30px', color: '#FFC107', marginBottom: '10px' }} />
              <p>Based on {totalReviews} reviews</p>
              <GoogleLogo>
                <img 
                  src="https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png" 
                  alt="Google" 
                  width="92" 
                />
              </GoogleLogo>
            </ReviewsHeader>
            
            {loading ? (
              <div style={{ textAlign: "center", padding: "40px 0" }}>
                <Spin size="large" />
              </div>
            ) : (
              <ReviewsWrapper>
                <div className="carousel-container">
                  <Carousel 
                    ref={carouselRef} 
                    dots={true} 
                    autoplay
                    autoplaySpeed={6000}
                  >
                    {/* Sort reviews by newest first (highest timestamp) */}
                    {[...reviews].sort((a, b) => b.time - a.time).map((review, index) => (
                      <div key={index}>
                        <ReviewCard>
                          <ReviewAuthor>
                            <Avatar 
                              src={review.profile_photo_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(review.author_name)}&background=random`} 
                              size={48} 
                            />
                            <div>
                              <h4>{review.author_name}</h4>
                              <Rate disabled defaultValue={review.rating} />
                            </div>
                          </ReviewAuthor>
                          
                          <ReviewText>
                            {review.text || (review.text_original ? review.text_original : 'Great service!')}
                          </ReviewText>
                          
                          {/* Display review image if available */}
                          {review.review_image_url && review.review_image_url.length > 0 && (
                            <ReviewImageContainer>
                              <img src={review.review_image_url} alt="" />
                            </ReviewImageContainer>
                          )}
                          
                          <ReviewDate>{formatDate(review.time)}</ReviewDate>
                        </ReviewCard>
                      </div>
                    ))}
                  </Carousel>
                  
                  <div className="carousel-arrows">
                    <Button 
                      type="primary" 
                      shape="circle" 
                      onClick={prevSlide}
                    >
                      ‚Üê
                    </Button>
                    <Button 
                      type="primary" 
                      shape="circle" 
                      onClick={nextSlide}
                    >
                      ‚Üí
                    </Button>
                  </div>
                  
                  <div style={{ textAlign: 'center', marginTop: '20px' }}>
                    <WriteReviewButton 
                      href={`https://search.google.com/local/writereview?placeid=ChIJ88pp-7EZtE0RttmdZtbpdMc`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      Write a Review
                    </WriteReviewButton>
                  </div>
                </div>
              </ReviewsWrapper>
            )}
          </Card>
        </Col>
      </Row>
    </GoogleReviewsContainer>
  );
};

export default withTranslation()(GoogleReviews);
